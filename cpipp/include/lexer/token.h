#ifndef CPIPP_TOKEN_H
#define CPIPP_TOKEN_H

typedef enum token_type_t {

    // Single-character tokens
    TOKEN_LEFT_PAREN = 1, TOKEN_RIGHT_PAREN,
    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,
    TOKEN_LEFT_CURLY_BRACE, TOKEN_RIGHT_CURLY_BRACE,
    TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,
    TOKEN_SEMICOLON, TOKEN_STAR, TOKEN_AT, TOKEN_SLASH,
    TOKEN_CARAT, TOKEN_TILDE, TOKEN_QUESTION,

    // One or two character tokens
    TOKEN_BANG, TOKEN_BANG_EQUAL,
    TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,
    TOKEN_GREATER, TOKEN_GREATER_EQUAL,
    TOKEN_LESS, TOKEN_LESS_EQUAL, 
    TOKEN_COLON, TOKEN_COLON_COLON, 
    TOKEN_AND, TOKEN_LOGICAL_AND,
    TOKEN_OR, TOKEN_LOGICAL_OR,

    // Literals
    TOKEN_NUMBER, TOKEN_FLOAT, TOKEN_STRING, TOKEN_IDENTIFIER,

    // Keywords
    TOKEN_ANY_TYPE, TOKEN_BREAK, TOKEN_BOOLEAN_TYPE, TOKEN_CONTINUE,
    TOKEN_DIM, TOKEN_ELSE, TOKEN_ENUM, TOKEN_FOR, TOKEN_FALSE,
    TOKEN_FUNCTION, TOKEN_GOTO, TOKEN_IF, TOKEN_INTEGER_TYPE,
    TOKEN_LONG_TYPE, TOKEN_MATCH, TOKEN_NONE, TOKEN_RETURN, TOKEN_REAL_TYPE,
    TOKEN_STEP, TOKEN_SELF, TOKEN_STRING_TYPE, TOKEN_STRUCT, TOKEN_TRUE,
    TOKEN_UNTIL, TOKEN_USE, TOKEN_UNSIGNED, TOKEN_WHILE,

    // Special Tokens
    TOKEN_EOF, TOKEN_ERROR

} TokenType;

typedef struct token_t {
    TokenType tokenType;
    const char *start;
    int length;
    int line;
} Token;

#endif